)


density = lambda x: 2.

bx, by, bz = (lambda x: x  for i in range(3))
ex, ey, ez = (lambda x: x  for i in range(3))
vx, vy, vz = (lambda x: 1. for i in range(3))

vthx, vthy, vthz = (lambda x: 1. for i in range(3))

vvv = {
    "vbulkx":vx, "vbulky":vy, "vbulkz":vz,
    "vthx":vthx, "vthy":vthy, "vthz":vthz
}

ph.MaxwellianFluidModel(
    bx=bx, by=bx, bz=bx,
    ex=bx, ey=bx, ez=bx,

    protons={"charge":-1, "density":density, **vvv},
    alpha={"charge":-1, "density":density, **vvv}
)

ph.DiagnosticInfo(
    file_name="lol.5"
)

ph.FluidDiagnostics(
    diag_type="density",            # choose in (rho_s, flux_s)
    write_every=1,                  # write on disk every x iterations
    compute_every=1,                # compute diagnostics every x iterations ( x <= write_every)
    start_iteration=1,              # iteration at which diag is enabled
    last_iteration=990,             # iteration at which diag is turned off
    population_name="protons"       # name of the population for which the diagnostics is made
  #,path = 'FluidDiagnostics1'      # where output files will be written, [default: name]
)

ph.ElectromagDiagnostics(
    diag_type="B",
    write_every=1,
    compute_every=1,
    start_iteration=1,
    last_iteration=990
)

ph.ParticleDiagnostics(
    diag_type="domain",          # choose particles within a spatial box
    write_every=1,
    compute_every=1,
    start_iteration=1,
    last_iteration=90,
    extent=(2., 4.),                # extent of the box
    population_name="protons"
)

